<head>
  <link rel="stylesheet" href="/css/proposals/proposals.css">
</head>

<body>
  <section class="section2">
    <div class="container-filter">
      <div class="filtro">
        <h2>Filtrar</h2>
        <div class="container-area">
          <label for="area">Área</label>
          <select name="area" id="area">
            <option value="Todos">Todos</option>
            <option value="Design">Design</option>
            <option value="UI design">UI Design</option>
            <option value="3D design">3D Design</option>
            <option value="Canva design">Canva design</option>
            <option value="UX">UX</option>
            <option value="Web design">Web design</option>
            <option value="Interior design">interior design</option>
            <option value="Poster design">Poster Design</option>
          </select>
        </div>
        <div class="container-periodo">
          <label for="periodo">Periodo</label>
          <select name="periodo" id="periodo">
            <option value="hoje">hoje</option>
            <option value="ultimaSemana">Ultima semana</option>
            <option value="ultimoMes">Ultimo mês</option>
          </select>
        </div>
        <div class="container-preco">
          <div class="min">
            <label for="min">Preço Min.</label>
            <input type="text" name="min" id="precomin">
          </div>
          <div class="max">
            <label for="max">Preço Max.</label>
            <input type="text" name="max" id="precomax">
          </div>
        </div>
        <div class="container-botao">
          <button type="submit" id="btnFiltrar">Filtrar</button>
        </div>
      </div>
    </div>

    <div class="propostas">
    </div>
  </section>

  <script type="module">
   import { initializeApp, getApps } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
import { getDatabase, ref, onValue, push, set, get } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-database.js"; 
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js"; 

const firebaseConfig = {
    apiKey: "AIzaSyAAtfGyZc3SLzdK10zdq-ALyTyIs1s4qwQ",
    authDomain: "workflow-da28d.firebaseapp.com",
    projectId: "workflow-da28d",
    storageBucket: "workflow-da28d.appspot.com",
    messagingSenderId: "939828605253",
    appId: "1:939828605253:web:0a286fe00f1c29ba614e2c",
    measurementId: "G-3LXB7BR5M1"
};

let app;
if (!getApps().length) {
    app = initializeApp(firebaseConfig);
} else {
    app = getApps()[0];
}
const db = getDatabase(app);
const auth = getAuth(app); 

const propostasContainer = document.querySelector('.section2 .propostas');
const btnFiltrar = document.getElementById('btnFiltrar');

let propostas = [];
let currentUserId = null; 
let currentUserName = ''; 
let currentUserPhoto = ''; 
let currentUserTag = ''; 

const modalCandidatarHtml = `
    <div id="modalCandidatar" class="modal" style="display:none; position: fixed; z-index: 1; left: 0; top: 0; width: 100%; height: 100%; overflow: auto; background-color: rgba(0,0,0,0.6); justify-content: center; align-items: center;">
        <div class="modal-content" style="background-color: #2a2a2a; margin: auto; padding: 25px; border: 1px solid #444; width: 80%; max-width: 500px; border-radius: 10px; box-shadow: 0 5px 15px rgba(0,0,0,0.3); color: #ddd;">
            <span class="modal-close" id="closeCandidatarModal" style="color: #aaa; float: right; font-size: 28px; font-weight: bold; cursor: pointer;">&times;</span>
            <h2 style="color: #5274D9; margin-bottom: 20px;">Enviar Candidatura</h2>
            <p style="margin-bottom: 15px;">Escreva uma breve descrição sobre por que você é o melhor candidato para esta proposta:</p>
            <textarea id="descricaoCandidatura" rows="8" placeholder="Sua mensagem para o contratante..." style="width: calc(100% - 20px); padding: 10px; margin-bottom: 20px; border-radius: 5px; border: 1px solid #555; background-color: #333; color: #eee; resize: vertical;"></textarea>
            <button id="btnConfirmarCandidatura" style="background-color: #5274D9; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; font-size: 1em; transition: background-color 0.3s ease;">Confirmar Candidatura</button>
        </div>
    </div>
`;
document.body.insertAdjacentHTML('beforeend', modalCandidatarHtml);


const modalCandidatar = document.getElementById('modalCandidatar');
const closeCandidatarModal = document.getElementById('closeCandidatarModal');
const descricaoCandidaturaInput = document.getElementById('descricaoCandidatura');
const btnConfirmarCandidatura = document.getElementById('btnConfirmarCandidatura');

let currentPropostaId = null; 

function formatarData(isoString) {
    const data = new Date(isoString);
    return isNaN(data) ? "Data inválida" : data.toLocaleDateString('pt-BR', { day: '2-digit', month: 'long', year: 'numeric' });
}

function renderizarPropostas(propostasFiltradas) {
    propostasContainer.innerHTML = '';

    if (propostasFiltradas.length === 0) {
        propostasContainer.innerHTML = '<p>Nenhuma proposta encontrada com os filtros selecionados.</p>';
        return;
    }

    propostasFiltradas.forEach(p => {
        const tagsHtml = Array.isArray(p.tags)
            ? p.tags.map(tag => `<span class="tag">${tag}</span>`).join('')
            : '';

        const fotoUrl = p.fotoAutorUrl || 'https://via.placeholder.com/40';
        const nomeAutor = p.nomeAutor || 'Nome não informado';

        const wrapper = document.createElement('div');
        const card = document.createElement('div');
        card.classList.add('proposta-card');
        card.dataset.propostaId = p.id;

        card.innerHTML = `
            <div class="head">
                <h3>${p.titulo || 'Sem título'}</h3>
                <div class="price">R$${p.precoMin || '-'} - R$${p.precoMax || '-'}</div>
            </div>
            <p class="criadoEm">Criado em ${formatarData(p.datacriacao)}</p>
            <div class="tags">${tagsHtml}</div>
            <p class="description">${p.descricao || ''}</p>
            <div class="client-footer">
                <div class="client">
                    <a href="/perfil?id=${p.autorId}" class="profile-link">
                        <img class="profilePic" src="${fotoUrl}" alt="${nomeAutor}">
                        <span class="client-name">${nomeAutor}</span>
                    </a>
                </div>
                <div class="buttons">
                    <button class="verMais">Ver mais</button>
                    <button class="enviar">se candidatar</button>
                </div>
            </div>
        `;

        wrapper.appendChild(card);
        propostasContainer.appendChild(wrapper);
    });
    adicionarEventoBotaoCandidatarse(); 
}

function adicionarEventoBotaoCandidatarse() {
    document.querySelectorAll('.enviar').forEach(botao => {
       
        botao.removeEventListener('click', handleCandidatarClick); 
        botao.addEventListener('click', handleCandidatarClick);
    });
}

async function handleCandidatarClick(event) {
    if (!currentUserId) {
        alert('Você precisa estar logado para se candidatar a uma proposta!');
        return;
    }

    const card = event.target.closest('.proposta-card');
    if (!card) return;

    const propostaId = card.dataset.propostaId;
    currentPropostaId = propostaId; 

    const candidaturaRef = ref(db, `Candidaturas/${propostaId}/${currentUserId}`);
    const candidaturaSnap = await get(candidaturaRef);

    if (candidaturaSnap.exists()) {
        alert('Você já se candidatou para esta proposta!');
        return;
    }
 
    modalCandidatar.style.display = 'flex';
    descricaoCandidaturaInput.value = ''; 
}


closeCandidatarModal.addEventListener('click', () => {
    modalCandidatar.style.display = 'none';
});

modalCandidatar.addEventListener('click', (e) => {
    if (e.target === modalCandidatar) {
        modalCandidatar.style.display = 'none';
    }
});

btnConfirmarCandidatura.addEventListener('click', async () => {
    const descricao = descricaoCandidaturaInput.value.trim();

    if (!descricao) {
        alert('Por favor, escreva uma descrição para sua candidatura.');
        return;
    }

    if (!currentPropostaId || !currentUserId) {
        alert('Erro: Proposta ou usuário não identificado. Tente novamente.');
        return;
    }

    try {
        const candidaturaData = {
            userId: currentUserId,
            nome: currentUserName,
            foto_perfil: currentUserPhoto,
            tag: currentUserTag, 
            mensagem: descricao,
            timestamp: Date.now()
        };

        await set(ref(db, `Candidaturas/${currentPropostaId}/${currentUserId}`), candidaturaData);

        alert('Candidatura enviada com sucesso!');
        modalCandidatar.style.display = 'none'; 

        const cardEnviado = document.querySelector(`.proposta-card[data-proposta-id="${currentPropostaId}"] .enviar`);
        if (cardEnviado) {
            if (!cardEnviado.classList.contains('enviado')) {
                cardEnviado.classList.add('enviado');
                const check = document.createElement('span');
                check.classList.add('checkmark');
                cardEnviado.textContent = 'Enviado';
                cardEnviado.appendChild(check);

                setTimeout(() => {
                    cardEnviado.classList.remove('enviado');
                    check.remove();
                    cardEnviado.textContent = 'se candidatar'; 
                }, 2000);
            }
        }

    } catch (error) {
        console.error("Erro ao enviar candidatura:", error);
        alert('Ocorreu um erro ao enviar sua candidatura. Tente novamente.');
    }
});

function filtrarPropostas() {
    const area = document.getElementById('area').value;
    const periodo = document.getElementById('periodo').value;
    const precoMin = parseFloat(document.getElementById('precomin').value) || 0;
    const precoMax = parseFloat(document.getElementById('precomax').value) || Infinity;
    const agora = new Date();

    const propostasFiltradas = propostas.filter(p => {
        const dataCriacao = new Date(p.datacriacao);
        if (isNaN(dataCriacao)) return false;

        const dentroDaArea = (area === "Todos") ? true : Array.isArray(p.tags) && p.tags.includes(area);

        let dentroDoPeriodo = true;
        if (periodo === 'hoje') {
            dentroDoPeriodo = dataCriacao.toDateString() === agora.toDateString();
        } else if (periodo === 'ultimaSemana') {
            const seteDiasAtras = new Date(agora);
            seteDiasAtras.setDate(agora.getDate() - 7);
            dentroDoPeriodo = dataCriacao >= seteDiasAtras;
        } else if (periodo === 'ultimoMes') {
            const trintaDiasAtras = new Date(agora);
            trintaDiasAtras.setDate(agora.getDate() - 30);
            dentroDoPeriodo = dataCriacao >= trintaDiasAtras;
        }

        const precoMinProposta = parseFloat(p.precoMin) || 0;
        const precoMaxProposta = parseFloat(p.precoMax) || 0;
        const dentroDoPreco = precoMinProposta >= precoMin && precoMaxProposta <= precoMax;

        return dentroDaArea && dentroDoPeriodo && dentroDoPreco;
    });

    renderizarPropostas(propostasFiltradas);
}

document.addEventListener('DOMContentLoaded', () => {
    btnFiltrar.addEventListener('click', (e) => {
        e.preventDefault();
        filtrarPropostas();
    });

    const searchInput = document.querySelector('.searchbar-input');
    const aplicarFiltroPorTitulo = (busca) => {
        if (!busca) {
            renderizarPropostas(propostas);
            return;
        }
        const filtradas = propostas.filter(p =>
            p.titulo?.toLowerCase().includes(busca.toLowerCase())
        );
        renderizarPropostas(filtradas);
    };

    const params = new URLSearchParams(window.location.search);
    const busca = params.get('busca') || '';
    if (searchInput) {
        searchInput.value = busca;
        if (busca) aplicarFiltroPorTitulo(busca);

        searchInput.addEventListener('input', (e) => {
            aplicarFiltroPorTitulo(e.target.value.trim());
        });
    }
});


onAuthStateChanged(auth, async (user) => {
    if (user) {
        currentUserId = user.uid;

        const freelancerSnap = await get(ref(db, `Freelancer/${currentUserId}`));
        if (freelancerSnap.exists()) {
            const userData = freelancerSnap.val();
            currentUserName = userData.nome || 'Usuário Anônimo';
            currentUserPhoto = userData.foto_perfil || 'https://via.placeholder.com/50';
            currentUserTag = userData.tag || 'Freelancer'; 
        } else {
            currentUserName = 'Usuário Logado';
            currentUserPhoto = 'https://via.placeholder.com/50';
            currentUserTag = 'Usuário';
        }
    } else {
        currentUserId = null;
        currentUserName = '';
        currentUserPhoto = '';
        currentUserTag = '';
    }

    onValue(ref(db, 'Propostas'), (snapshot) => {
        propostas = [];
        snapshot.forEach(childSnap => {
            const propostaData = { id: childSnap.key, ...childSnap.val() };
            propostas.push(propostaData);
        });

        const params = new URLSearchParams(window.location.search);
        const busca = params.get('busca') || '';
        if (busca) {
            const searchInput = document.querySelector('.searchbar-input');
            if (searchInput) {
                searchInput.value = busca;
                const filtradas = propostas.filter(p =>
                    p.titulo?.toLowerCase().includes(busca.toLowerCase())
                );
                renderizarPropostas(filtradas);
            } else {
                renderizarPropostas(propostas);
            }
        } else {
            renderizarPropostas(propostas);
        }
    });
});
  </script>
</body>